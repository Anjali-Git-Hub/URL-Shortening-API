Great questions! Let's break down the reasons behind creating a separate input element and appending it to the document body, as well as how `document.execCommand("copy")` works.

**1. Creating a Separate Input Element:**
- The primary reason for creating a separate input element is that the `execCommand("copy")` method is designed to work with input fields and text areas. It's not intended to work directly on arbitrary pieces of text or HTML elements.
- By creating an input element and setting its value to the short link, we're essentially providing a "container" for the text we want to copy. This allows us to take advantage of the built-in text selection and copying functionality provided by browsers when interacting with input fields.
- This approach ensures cross-browser compatibility because it relies on standard browser behavior for copying text from input fields. Without the input element, you would need to manually implement text selection and clipboard interaction, which can be complex and less reliable.

**2. Appending the Input Element to `document.body`:**
- The reason for appending the input element to the `document.body` is that it needs to be part of the DOM (Document Object Model) for the `select` and `execCommand("copy")` operations to work as expected.

- `document.execCommand("copy")` operates on DOM elements, and the selected text must be part of the rendered page. By temporarily adding the input element to the document body, we ensure that it's in the DOM and can be selected and copied.

- After the copy operation is complete, the input element is immediately removed from the DOM (`document.body.removeChild(tempInput)`) to keep the page structure clean and prevent any visual interference.

**3. `document.execCommand("copy")` and Selecting Text:**
- `document.execCommand("copy")` is a browser-specific method that provides a standardized way to interact with the system clipboard. When called, it attempts to copy the currently selected text (or text within a specified input field) to the clipboard.

- In this case, when we call `tempInput.select()`, it selects the text inside the temporary input field we created. It's equivalent to clicking and dragging the cursor over the text to select it manually.

- When `document.execCommand("copy")` is called immediately after `tempInput.select()`, it operates on the selected text within the input field and copies it to the clipboard.

- Other elements on the page are not affected because they are not part of the selected text within the input field. The `select` method ensures that only the text within the input field is copied, leaving the rest of the page content unchanged.

By following this approach, you leverage the browser's built-in functionality for text selection and clipboard operations, ensuring consistency and reliability across different browsers.